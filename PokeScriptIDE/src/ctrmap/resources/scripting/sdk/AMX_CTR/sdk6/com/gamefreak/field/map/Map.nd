#ifdef XY

/**
*	Calls the internal function of the field subsystem that carries out a zone transition.
*
*	@param zoneId The Zone to transition to.
*	@param destX X location of the player after the transition.
*	@param destX Y location of the player after the transition.
*	@param destX Z location of the player after the transition.
*	@param ori Common orientation value of the player after the transition.
*	@param retainBGM If set, the BGM remains unchanged by the transition.
*	@param doFieldEventEntranceIn If set, the game calls DllFieldEventEntranceIn and plays the default map fade animations.
*	@param showPlaceName If set, the place name display layout is invoked after the transition.
*
*	@throws UndefinedException if this method is called in Pokémon Omega Ruby/Alpha Sapphire as said games require one more argument.
*/
native void _MapChangeCore(int zoneId, int destX, int destY, int destZ, int ori, boolean retainBGM, boolean doFieldEventEntranceIn, boolean showPlaceName);

#endif

#ifdef SANGO

/**
*	Calls the internal function of the field subsystem that carries out a zone transition.
*
*	@param zoneId The Zone to transition to.
*	@param destX X location of the player after the transition.
*	@param destX Y location of the player after the transition.
*	@param destX Z location of the player after the transition.
*	@param ori Common orientation value of the player after the transition.
*	@param retainBGM If set, the BGM remains unchanged by the transition.
*	@param doFieldEventEntranceIn If set, the game calls DllFieldEventEntranceIn and plays the default map fade animations.
*	@param unknown Unknown parameter.
*	@param showPlaceName If set, the place name display layout is invoked after the transition.
*
*	@throws UndefinedException if this method is called in Pokémon XY as said games only accept 8 arguments for this function.
*/
native void _MapChangeCore(int zoneId, int destX, int destY, int destZ, int ori, boolean retainBGM, boolean doFieldEventEntranceIn, boolean unknown, boolean showPlaceName);

#endif

/**
*	Performs the zone warp sequence without using a real warp entity.
*
*	@param entryWarpType The transition type (as seen in the Warp Editor) of the virtual source warp.
*	@param arrivalWarpType The transition type (as seen in the Warp Editor) of the virtual destination warp.
*	@param destX X location of the player after the transition.
*	@param destX Y location of the player after the transition.
*	@param destX Z location of the player after the transition.
*	@param ori Common orientation value of the player after the transition.
*/
native void MapChangeFake(int entryWarpType, int arrivalWarpType, int destX, int destY, int destZ, int destOri);

/**
*	Sets a grid position for FieldMapper to calculate chunk culling from.
*
*	@param x X location on the grid. 
*	@param y Y altitude in world coordinates.
*	@param z Z location on the grid.
*/
native void MapperBlockCalcPosSet(int x, int y, int z);

/**
*	Clears the overriden grid position of the FieldMapper.
*/
native void MapperBlockCalcPosClear();